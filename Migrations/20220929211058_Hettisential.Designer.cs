// <auto-generated />
using System;
using HettisentialMvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HettisentialMvc.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220929211058_Hettisential")]
    partial class Hettisential
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("HettisentialMvc.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("healthCenterID")
                        .HasColumnType("int");

                    b.Property<int>("hospitalID")
                        .HasColumnType("int");

                    b.Property<int>("medicalLabID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyID")
                        .IsUnique();

                    b.HasIndex("healthCenterID")
                        .IsUnique();

                    b.HasIndex("hospitalID")
                        .IsUnique();

                    b.HasIndex("medicalLabID")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HettisentialMvc.AdminMeasage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MesageType")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<string>("MessageSubject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdminMeasages");
                });

            modelBuilder.Entity("HettisentialMvc.ApplicationUserAdminMeasage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminMessageId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminMessageId");

                    b.HasIndex("PatientId");

                    b.ToTable("ApplicationUserAdminMeasage");
                });

            modelBuilder.Entity("HettisentialMvc.Entities.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AdminImage")
                        .HasColumnType("text");

                    b.Property<int>("AdministratorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Obanoko,Ibadan",
                            AdministratorType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2022, 9, 29, 21, 10, 56, 398, DateTimeKind.Utc).AddTicks(6312),
                            Email = "Adex@gmail.com",
                            Firstname = "Ade",
                            Gender = 1,
                            IsDeleted = false,
                            Lastname = "Ademola",
                            PhoneNumber = "090933540069",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Obanoko,lagos",
                            AdministratorType = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2022, 9, 29, 21, 10, 56, 398, DateTimeKind.Utc).AddTicks(7218),
                            Email = "Adex@gmail.com",
                            Firstname = "Masroor",
                            Gender = 1,
                            IsDeleted = false,
                            Lastname = "Ahmad",
                            PhoneNumber = "090933540069",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HettisentialMvc.Entities.Identities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AdminisTrator",
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Patients",
                            IsDeleted = false,
                            RoleName = "Patients"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Pharmacies",
                            IsDeleted = false,
                            RoleName = "Pharmacy"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " MedicalLAbs",
                            IsDeleted = false,
                            RoleName = "MedicalLAb"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " HealthCenters",
                            IsDeleted = false,
                            RoleName = "HealthCenter"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Hospitals",
                            IsDeleted = false,
                            RoleName = "Hospital"
                        });
                });

            modelBuilder.Entity("HettisentialMvc.Entities.JoinerTables.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MeasageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasageId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HettisentialMvc.HealthCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HealthCenterName")
                        .HasColumnType("text");

                    b.Property<string>("HoursOfWork")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("healthCenters");
                });

            modelBuilder.Entity("HettisentialMvc.HealthCenterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("HealthCenterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterID");

                    b.HasIndex("ServicesID");

                    b.ToTable("healthCenterServices");
                });

            modelBuilder.Entity("HettisentialMvc.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("HealthCenterCategory")
                        .HasColumnType("int");

                    b.Property<string>("HospitalImage")
                        .HasColumnType("text");

                    b.Property<string>("HoursOfWork")
                        .HasColumnType("text");

                    b.Property<string>("HoursOfWorks")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthCenterCategory = 3,
                            HospitalImage = ".-wwwrootssets-img\news-5.jpg",
                            HoursOfWork = "24 Hours Open",
                            IsDeleted = false,
                            Name = "Lasuth",
                            PostalCode = 0,
                            userID = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HealthCenterCategory = 2,
                            HospitalImage = ".-wwwrootssets-img\news-5.jpg",
                            HoursOfWork = "24 Hours Open",
                            IsDeleted = false,
                            Name = "FMC",
                            PostalCode = 0,
                            userID = 2
                        });
                });

            modelBuilder.Entity("HettisentialMvc.HospitalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalID");

                    b.HasIndex("ServicesID");

                    b.ToTable("hospitalServices");
                });

            modelBuilder.Entity("HettisentialMvc.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<int>("healthCenterID")
                        .HasColumnType("int");

                    b.Property<int>("hospitalID")
                        .HasColumnType("int");

                    b.Property<int>("medicalLabID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("healthCenterID");

                    b.HasIndex("hospitalID");

                    b.HasIndex("medicalLabID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("HettisentialMvc.Measage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MesageType")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<string>("MessageSubject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Measages");
                });

            modelBuilder.Entity("HettisentialMvc.MedicalLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HoursOfWork")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LabName")
                        .HasColumnType("text");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("medicalLabs");
                });

            modelBuilder.Entity("HettisentialMvc.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("text");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cement,Lagos",
                            Age = 23,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2022, 9, 29, 21, 10, 56, 399, DateTimeKind.Utc).AddTicks(2438),
                            Email = "Zaf@gmail.com",
                            Firstname = "Jhon",
                            IsDeleted = false,
                            Lastname = "Doe",
                            PhoneNumber = "090933540069",
                            UserId = 1,
                            gender = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Cement,Lagos",
                            Age = 23,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2022, 9, 29, 21, 10, 56, 399, DateTimeKind.Utc).AddTicks(4631),
                            Email = " Anita@gmail.com",
                            Firstname = "Anita",
                            IsDeleted = false,
                            Lastname = " balde",
                            PhoneNumber = "090933540069",
                            UserId = 2,
                            gender = 1
                        });
                });

            modelBuilder.Entity("HettisentialMvc.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HoursOfWork")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Private Pharmarcy",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Drugs Only",
                            Email = "Lufem@gmail.com",
                            HoursOfWork = "24 Hours Open",
                            IsDeleted = false,
                            PharmacyName = "Lufem Pharmarcy Store",
                            PhoneNumber = "0909878765",
                            PostalCode = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HettisentialMvc.PharmacyService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<int>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("ServicesID");

                    b.ToTable("pharmacyServices");
                });

            modelBuilder.Entity("HettisentialMvc.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("services");
                });

            modelBuilder.Entity("HettisentialMvc.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("text");

                    b.Property<string>("UserLastName")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mayd@yahoo.com",
                            IsDeleted = false,
                            Password = "password",
                            PhoneNumber = "08136794915",
                            UserFirstName = "MasroorAhmad",
                            UserLastName = "Yusuf",
                            UserName = "Damilare"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mayd@yahoo.com",
                            IsDeleted = false,
                            Password = "password",
                            PhoneNumber = "08136794915",
                            UserFirstName = "Ramon",
                            UserLastName = "Yusuf",
                            UserName = "Damilare"
                        });
                });

            modelBuilder.Entity("HettisentialMvc.medicalLabService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ServicesID")
                        .HasColumnType("int");

                    b.Property<int>("medicalLabID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicesID");

                    b.HasIndex("medicalLabID");

                    b.ToTable("medicalLabServices");
                });

            modelBuilder.Entity("HettisentialMvc.patienthospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("userId");

                    b.ToTable("UserHealthCenters");
                });

            modelBuilder.Entity("SearchButtons.SearchButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSearch")
                        .HasColumnType("int");

                    b.Property<string>("SearchKeyWord")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("searchButtons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NumberOfSearch = 30,
                            SearchKeyWord = "FMC"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NumberOfSearch = 50,
                            SearchKeyWord = "Lasuth"
                        });
                });

            modelBuilder.Entity("HettisentialMvc.Address", b =>
                {
                    b.HasOne("HettisentialMvc.Pharmacy", "Pharmacy")
                        .WithOne("address")
                        .HasForeignKey("HettisentialMvc.Address", "PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.HealthCenter", "healthCenter")
                        .WithOne("address")
                        .HasForeignKey("HettisentialMvc.Address", "healthCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Hospital", "hospital")
                        .WithOne("address")
                        .HasForeignKey("HettisentialMvc.Address", "hospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.MedicalLab", "medicalLab")
                        .WithOne("address")
                        .HasForeignKey("HettisentialMvc.Address", "medicalLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("healthCenter");

                    b.Navigation("hospital");

                    b.Navigation("medicalLab");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HettisentialMvc.ApplicationUserAdminMeasage", b =>
                {
                    b.HasOne("HettisentialMvc.AdminMeasage", "AdminMessage")
                        .WithMany("ApplicationUserAdminMessages")
                        .HasForeignKey("AdminMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("AdminMessage");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HettisentialMvc.Entities.Administrator", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("HettisentialMvc.Entities.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.Entities.JoinerTables.UserRole", b =>
                {
                    b.HasOne("HettisentialMvc.Measage", "Measage")
                        .WithMany()
                        .HasForeignKey("MeasageId");

                    b.HasOne("HettisentialMvc.Entities.Identities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measage");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.HealthCenter", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("healthCenter")
                        .HasForeignKey("HettisentialMvc.HealthCenter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.HealthCenterService", b =>
                {
                    b.HasOne("HettisentialMvc.HealthCenter", "healthCenter")
                        .WithMany("healthCenterServices")
                        .HasForeignKey("HealthCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Services", "services")
                        .WithMany("healthCenterServices")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("healthCenter");

                    b.Navigation("services");
                });

            modelBuilder.Entity("HettisentialMvc.Hospital", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("Hospital")
                        .HasForeignKey("HettisentialMvc.Hospital", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.HospitalService", b =>
                {
                    b.HasOne("HettisentialMvc.Hospital", "Hospital")
                        .WithMany("hospitalServices")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Services", "services")
                        .WithMany("hospitalServices")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("services");
                });

            modelBuilder.Entity("HettisentialMvc.Image", b =>
                {
                    b.HasOne("HettisentialMvc.Pharmacy", "Pharmacy")
                        .WithMany("images")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.HealthCenter", "healthCenter")
                        .WithMany("images")
                        .HasForeignKey("healthCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Hospital", "hospital")
                        .WithMany("images")
                        .HasForeignKey("hospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.MedicalLab", "medicalLab")
                        .WithMany("images")
                        .HasForeignKey("medicalLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("healthCenter");

                    b.Navigation("hospital");

                    b.Navigation("medicalLab");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HettisentialMvc.MedicalLab", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("medicalLab")
                        .HasForeignKey("HettisentialMvc.MedicalLab", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.Patient", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("patient")
                        .HasForeignKey("HettisentialMvc.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.Pharmacy", b =>
                {
                    b.HasOne("HettisentialMvc.User", "User")
                        .WithOne("pharmacy")
                        .HasForeignKey("HettisentialMvc.Pharmacy", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.PharmacyService", b =>
                {
                    b.HasOne("HettisentialMvc.Pharmacy", "Pharmacy")
                        .WithMany("pharmacyServices")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.Services", "services")
                        .WithMany("pharmacyServices")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("services");
                });

            modelBuilder.Entity("HettisentialMvc.medicalLabService", b =>
                {
                    b.HasOne("HettisentialMvc.Services", "services")
                        .WithMany("medicalLabServices")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HettisentialMvc.MedicalLab", "medicalLab")
                        .WithMany("medicalLabServices")
                        .HasForeignKey("medicalLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medicalLab");

                    b.Navigation("services");
                });

            modelBuilder.Entity("HettisentialMvc.patienthospital", b =>
                {
                    b.HasOne("HettisentialMvc.Hospital", "Hospital")
                        .WithMany("UserHealthCenters")
                        .HasForeignKey("HospitalId");

                    b.HasOne("HettisentialMvc.Patient", null)
                        .WithMany("UserHealthCenters")
                        .HasForeignKey("PatientId");

                    b.HasOne("HettisentialMvc.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HettisentialMvc.AdminMeasage", b =>
                {
                    b.Navigation("ApplicationUserAdminMessages");
                });

            modelBuilder.Entity("HettisentialMvc.Entities.Identities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HettisentialMvc.HealthCenter", b =>
                {
                    b.Navigation("address");

                    b.Navigation("healthCenterServices");

                    b.Navigation("images");
                });

            modelBuilder.Entity("HettisentialMvc.Hospital", b =>
                {
                    b.Navigation("address");

                    b.Navigation("hospitalServices");

                    b.Navigation("images");

                    b.Navigation("UserHealthCenters");
                });

            modelBuilder.Entity("HettisentialMvc.MedicalLab", b =>
                {
                    b.Navigation("address");

                    b.Navigation("images");

                    b.Navigation("medicalLabServices");
                });

            modelBuilder.Entity("HettisentialMvc.Patient", b =>
                {
                    b.Navigation("UserHealthCenters");
                });

            modelBuilder.Entity("HettisentialMvc.Pharmacy", b =>
                {
                    b.Navigation("address");

                    b.Navigation("images");

                    b.Navigation("pharmacyServices");
                });

            modelBuilder.Entity("HettisentialMvc.Services", b =>
                {
                    b.Navigation("healthCenterServices");

                    b.Navigation("hospitalServices");

                    b.Navigation("medicalLabServices");

                    b.Navigation("pharmacyServices");
                });

            modelBuilder.Entity("HettisentialMvc.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("healthCenter");

                    b.Navigation("Hospital");

                    b.Navigation("medicalLab");

                    b.Navigation("patient");

                    b.Navigation("pharmacy");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
